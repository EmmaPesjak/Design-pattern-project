# Project Report
Emma Pesjak


## Environment & Tools
This project was performed on a Windows 10 PC with IntelliJ version 2022.2.3, Java version openjdk 19.0.1, 
maven version 3.8.5, and Git version 2.33.0.windows.2.


## Purpose
The purpose of this project was to demonstrate a comprehensive understanding of the course's learning
objectives. Specifically, to create an event-driven application with a Graphical User Interface (GUI) using 
Java Swing. The goal was to achieve a grade as high as possible and thereby showcase the utilization of the
Swing library and implementing a range of different layouts and components. Furthermore, to incorporate the use of 
Streams API and to use concurrent synchronized processes in an atomic fashion. Lastly also to demonstrate the 
use of design patterns. While having the entire code structured according to the Model-View-Controller (MVC) 
pattern, also incorporating the observer, object pool, producer/consumer, factory method, abstract factory,
and template method patterns.

To summarize the concrete goals:<br>
1. Create an event-driven application with a GUI. 
2. Have a minimum of five concurrent processes, where at least 3 are synchronized. 
3. Include at least six different Swing components and four different layouts. 
4. Use the seven design patterns mentioned above. 
5. Implement at least three uses of Streams API.


## Procedures
The MVC pattern was the base structure and architecture used for this project. Different packages for models, views, 
and controllers contained almost all the classes and interfaces. A `Constants` interface was created in the support 
package. This interface contained defined constant values used throughout the program by the different classes.
A `Project` class directly under the project package was the program's main starting point and initiated the controller.
The game consisted of 5 different levels with various implementations to fulfill all the project requirements. 
Each level was represented by a monster, read the 'Execution of the program' section below for more information 
about the levels. 

The `MainModel` class was responsible for handling the application's data, performing calculations, and 
communicating with the controller. The `MainModel` class was completely in charge of the logic for levels 1 and 2, 
and handled the communication with the controller for level 3. This class also created the monsters for each level 
with the `getRandomMonster()` method which used the `MonsterFactory` described in the factory subcategory below. 
For level 1 the `MainModel` had three methods: `level1RandomWords()`, `sortLevel1Alphabetically()`, and 
`countWordsLevel1()`. These methods produced different strings from a list of words to be used in the GUI depending 
on the choice of the user. This was also where two streams API methods were used. The 
`stream().sorted().collect(Collectors.toList())`, for sorting the list in alphabetical order, and the 
`stream().filter()` for counting words in the list that consisted of more than five letters. The third stream API
method was the `stream().reduce()` which was used by the `calculateLevel2(List<Integer> numbs)` method. This simply 
took a list of integers as arguments and calculated the sum of these. The integers came from the user input in 
level 2 via the controller. It then checked if the calculated value was equal to the set value in the `Constants` 
interface and returned a boolean. The rest of the classes in the models package are described in greater detail in 
the subcategories of design patterns below.

The view classes were responsible for creating the GUI for the application. The class `ViewFrame` initiated the JFrame 
and set the size and background. It had a method for updating the view, which took a panel as an argument, adding it to 
the frame, and repainted/revalidated. It also had a method for displaying error messages. Since all the buttons of the 
application and almost all the panels had the same base design, the classes `MyButton` and `MyPanel` were created. These 
set the layout and looks of these components. A class `HealthBarPanel` for creating the health bar panel of level 
5 was also created. This class got the amount of health and color it was supposed to portray via the `Controller` 
and painted the graphics as a rectangle with it. Each level, as well as the start and end screens, 
had its class for creating the panel to present in the GUI frame, extending the `BaseView` class with the 
template method pattern described in greater detail in the subcategory below. These classes set the design of the 
event-driven GUI, utilizing the Constants interface for colors and fonts. They used Swing components such as
`JLabel`, `JRadioButton`, `JCombobox`, `JPanel`, `ImageIcon`, `JButton`, and `JTextField`. They also used the
Swing layouts `GridLayout`, `BorderLayout`, `GridBagLayout`, `BoxLayout`, and `FlowLayout`. A problem that occurred 
during the creation of the JAR file using the command "mvn clean verify" in the terminal, was that the images used 
in the application were not displayed in the GUI when the JAR was executed. This was solved by placing all image 
.pngs in the resources directory and adding an `ImageReader` class. This class created JLabels with the ImageIcons 
from the URL by the class loader.

The `Controller` was responsible for communication with the models and the views, accessing data from the view,
telling the model to calculate the data, and then telling the view to update. The constructor initiated the different
level views, added action listeners to the buttons, and displayed the start view. The action listeners were implemented
as inner classes. The `Level1ComboboxListener` was responsible for listening to the combo box of level 1 and updating 
the UI with the help of the model depending on the choice of the user. The `Level2ButtonListener` and the
`Level4ButtonListener` was in their own ways responsible for checking if the user had answered correctly and either 
initiating the next level or displaying a message telling the user to try again. The `Level3ButtonListenerProduce` was 
responsible for telling the view to display produced characters from the model. The `Level5ButtonListener` was
simply responsible for initiating the level 5 simulation. The `NextLevelButtonListener` started the next level by 
making the panel of the view it received as an argument. The `QuitButtonListener` simply terminated the program.

### Producer/consumer pattern
The producer/consumer pattern was used in the healing simulation in level 5. It was also here that the concurrent 
synchronized processes were implemented by having seven threads, producers and consumers, accessing the shared resource
of health. Two classes for the different actors were created, one `HealThread` representing the producer and one 
`DamageThread` representing the consumer, see figure 1. These classes were very similar, their constructor took and set 
a `Vaelarya` which represented the dragon's health bar in the simulation. They both implemented the `Runnable` 
interface, and had a private volatile boolean that was used to control the lifetime of the thread. They both had a 
`stopThread()` method which simply set the boolean to false and thereby terminating the thread in the overridden
`run()` method. The `run()` method contained a while loop that ran as long as the boolean was set to true. The 
`HealThread`'s `run()` method simply randomized a healing amount which it communicated to the class `Vaelarya` via the 
synchronized `addHealth(int healAmount)` method, it then slept for a set number of seconds. In addition to the 
`addHealth()` method, `Vaelarya` also had a synchronized `removeHealth()` method which was used by the `DamageThread`. 
The `DamageThread`'s `run()` method used a `Weapon` from the `WeaponDistributor` as described below in the object pool
pattern section. If a weapon was available, the thread would first sleep for a set amount of seconds, representing the
time it took the monster to swing the weapon. It would then use the weapon by calling `Vaelarya`'s 
`removeHealth(int damageAmount)` method with the integer damage of the weapon. It would then return the weapon to 
the distributor and sleep again for a set amount of seconds representing rest time. However, if no weapon was available 
the thread would simply sleep for a set amount of seconds representing wait time.

![](UMLProducerConsumer.png)
<br>Figure 1: UML diagram of the producer/consumer pattern.

### Observer pattern
The observer pattern was also used for the healing simulation in level 5, see figure 2 for a UML diagram describing it.
To start the simulation, the user would press a button with an action listener which called the `Controller`s 
`initLevel5()` method. This method would create and start the `DamageThread`s and `HealThread` used in the simulation, 
it also added itself as an observer to the `Vaelarya` class and start a timer. The timer called the `updateLevel5View()`
method every 150ms. This method simply communicated with the view, updating it with a new `HealthBarPanel` depicting 
the current health of the dragon. To be able to get the current health, two interfaces, `Observer` and `Observable`, 
were implemented. The `Observable` interface contained methods for adding and notifying observers. This interface was
implemented by the observable class `Vaelarya`, which overrode the methods of the interface. The method for adding 
observers simply took an observer as an argument and added this to a list of observers. The method for notifying 
observers looped over the list of observers and called each observer's update method. This meant that the `Observer` 
interface needed to have a method for updating, which was its only method. The `Controller` class implemented this 
interface and overrode the method, checking the current amount of health from the `Vaelarya` with the `getHealth()` 
method. Based on if the current health was above the set upper health or equal to or below 0, the `Controller` would 
end the simulation, stop the timer, terminate the threads, and set up the end view. If the amount of health was 
somewhere in between the simulation would continue. 

![](UMLObserver.png)
<br>Figure 2: UML diagram of the observer pattern. Note that the `Controller` class contains several more inner 
classes which are not relevant for the observer pattern.

### Object pool pattern
The object pool pattern was implemented as a `WeaponDistributor`, which held a pool of `Weapon`s used by the client
`DamageThread`, see figure 3 for a UML diagram describing the pattern. The client would ask the distributor for a 
reusable weapon to use and then return when finished with it. The `WeaponDistributor` class was implemented as a 
Singleton. In the private constructor, three `Weapon`s were created and added to a blocking queue. Methods for
borrowing and returning weapons were also added to this class. The `Weapon` class had a single method for getting 
the weapon damage, this was randomized with the upper limit set in the `Constants` interface.

A concurrency problem that occurred was that during the testing of the program a `ConcurrentModificationException` 
would sometimes trigger. This was because the weapons list was first implemented as an ordinary deque. By using a 
blocking queue instead, which is thread-safe, the problem was fixed.

![](UMLObjectPool.png)
<br> Figure 3: UML diagram of the implemented object pool pattern.

### Factory method and Abstract factory pattern
Two factories were implemented in the program; the `MonsterFactory` and the `UnicornFactory`, both of these implemented 
the `AbstractFactory` interface. Figure 4 displays a UML diagram of the factory patterns. The `AbstractFactory` was set
to define an interface for creating a set of products; a character and a color, which defines the abstract factory
pattern. The `createChar()` and `createColor` methods were both responsible for creating concrete products. This was 
done by the subclasses with the factory method. Both the `MonsterFactory` class and the `UnicornFactory` class 
randomized which concrete product to create. Each concrete product extended either the abstract class `BaseCharacter`
or `BaseColor`, which had getters and setters for names and image paths respectively colors. Four methods were 
implemented in the `MainModel` class for getting random monsters, getting lists of random characters' image path and 
name, getting random colors, and getting random factories which were used by the two previous methods. 

A design problem that occurred here was that a simple factory was implemented instead of a factory method at first.
The factory method is often mistaken for the simple factory idiom, and when reviewing the course material this was
changed and the proper patterns were implemented.

![](UMLFactory.png)
<br>Figure 4: UML diagram of the factory method and abstract factory patterns. Note that the `MainModel` class 
contains several more methods which are not relevant for the factory patterns.

### Template method pattern
Since the different views were quite similar when it came to base layout, the template method pattern was implemented 
to optimize the code. This let the concrete subclasses follow the algorithm in the base class, but each subclass 
decided how to implement each step. The abstract class `BaseView` was implemented as a base class. This defined the
method `makePanel()` for creating the panel to be added to the GUI frame. The panel consisted of smaller panels 
(top, center, and bottom) and an action listener for a button, these all had a method for implementation. They 
also had hooks in case the concrete views decided not to implement all of them. A method for updating the GUI frame 
with the panel was also added to the `BaseView`. Each concrete subclass, see figure 5, extended `BaseView` and overrode
its methods, decided how the GUI should look, and decided if the hooks should be used.

![](UMLTemplate.png)
<br>Figure 5: UML diagram of the template method used for the different views. Note that many of the arguments 
of the different methods are simply described as '(...)' in the figure to save space.


## Discussion
One of the concrete goals of the purpose was to create an event-driven application with a GUI. This goal has been 
achieved since the application certainly is event-driven as the user interacts with buttons, radio buttons, and
combo boxes in the GUI. The GUI has several views with many graphical components that the user interacts 
with during the different levels. Another concrete goal was to include at least six different Swing components and four 
different layouts. This has also been achieved to the highest degree. The swing components used were as mentioned in
the procedures; `JFrame`, `JLabel`, `JRadioButton`, `JCombobox`, `JPanel`, `ImageIcon`, `JButton`, and `JTextField`.
The Swing layouts used were; `GridLayout`, `BorderLayout`, `GridBagLayout`, `BoxLayout`, and `FlowLayout`. Some 
components, such as the `JButton` and `JPanel` were frequently made from their own classes `MyButton` and `MyPanel`.
This allowed for generic looks in the GUI with significantly less code than if the attributes had been set each time 
a class would have made a button or panel.

The MVC pattern was the foundation architecture for this project, dividing the entities into the roles and packages of 
models/views/controllers. Entities not adhering to any of the roles, like factories, the `Constants` interface, and the 
`WeaponDistributor` were placed in the factories package respectively the support package. As mentioned in the 
procedures section, the controller stood for the communication between the models and the views. The views created 
the GUI and the models contained the data and performed the calculations. The goal of structuring the project 
according to the MVC pattern has thereby been fulfilled. The controller handles multiple views and models. All of 
these are created and used by the controller. Alternatively, the creation could be taken out of the controller and 
instead supplied by some other class with a responsibility of creating the entities. However, this was not done....

The `MainModel` class consisted of methods for several levels,
if the 
levels of the game had contained more and larger methods, the `MainModel` could have been divided into one model per
level to increase the readability of the code. By creating the `Constants` interface and placing all common variables 
like names, colors, and combat stats in it, the flexibility of the code increases, and redundancies are somewhat 
avoided. It makes changing these values easier, and the program becomes more scalable.

Another concrete goal was to implement at least three uses of Streams API. Streams API can be used for various purposes,
in this project `stream.reduce()`, `stream().filter()`, and `stream().sorted().collect(Collectors.toList())` were used
as described in the procedures section. Using the Streams API significantly shortens and improves the readability of 
the code. As the `MainModel::calculateLevel2(List<Integer> numbs)` takes a list of integers, the 
`stream.reduce(0, Integer::sum)` sums these up in one line of code. An alternative would be to declare a sum variable,
loop over the list and add each integer to the sum variable. This would require multiple lines of code. The same goes
for `MainModel::countWordsLevel1()`, where `stream().filter()` was used instead of looping over a list counting words
longer than five letters and storing the sum in some variable. The third use of Streams API which was used in
`MainModel::sortLevel1Alphabetically()`. It provided one line of code that sorted the list of words alphabetically and
collected the items to a new list. The list could then be joined into a string for output in the GUI.

The goal of having a minimum of five concurrent processes, where at least 3 were synchronized was fulfilled in the 
producer/consumer pattern. Seven threads competed in the simulation of healing the dragon, six taking health, and one 
healing. When multiple synchronized threads are used, thread safety is of utter importance for avoiding concurrency 
issues. This can be done in a variety of ways, by adding locks, using atomic integers, adding synchronized blocks,
synchronizing whole methods, etc. As declaring methods synchronized adds a built-in lock, this was chosen for the 
critical methods of the program as the methods with possible concurrency risks did not have many lines of code. 
If they had been larger with more or broader functionality, perhaps a synchronized block had been preferable, or using 
an atomic integer. Often when using the producer/consumer pattern, the shared resources are some form of objects, 
and a blocking queue is used to avoid concurrency issues. However, since the shared resource in this application is an 
integer, a blocking queue was not necessary here. The entire healing simulation could easily be enhanced to add more 
information about the fight and show this to the user. Information about which monster was using which weapon, how much
damage was done by whom, which monsters were resting, etc. could have been visualized in the GUI or printed in the 
console/to a log file, this was not implemented as the solution as it fulfills the goals, but it is a way to build on 
to the application later.

The observer pattern lets a subject/observable be observed by its observers and is often used in even-driven software. 
In this program, the pattern was implemented to let the `Controller` be aware of the changed state of the health 
of `Vaelarya`, and then communicate it to the views which updated the GUI. Usually, the observer pattern´s observable
also has a `removeObserver()` method. However, such a method was not necessary for this program since no observer ever
needs to be removed. Currently, the program only has one observer, and the `Vaelarya::notifyObservers()` method
loops over a list of the only observer when notifying. This might seem unnecessary, but it allows for easily adding 
multiple observers would the program be developed further. Observables are often good to implement as Singletons
and instantiate by the classes using them. `Vaelarya` was not implemented as a Singleton, and to solve the communication 
between it, the `Controller`, and the producer/consumers, a new `Vaelarya` was created in the controller and passed
to the threads.

Object pools reuse objects and are often used when the cost of initiating a resource is high. In this project, the cost 
of initiating a `Weapon` is not high but the object pool `WeaponDistributor` demonstrates the object pool design
pattern (as a distribution service), which was one of the objectives of this project. The distributor has a pool of 
weapons for the monsters to use when fighting the dragon. It keeps track of these weapons and lends them to the 
monsters, who return them when finished with them. Since multiple threads are trying to access the pool simultaneously, 
it is important to make it thread-safe. As mentioned above in the procedures section, this was a problem that occurred 
during development and was solved with a blocking queue. This meant that the `borrowWeapon()` and 
`returnWeapon(Weapon weapon)` methods did not need to be declared synchronized.

The factory patterns encapsulate the creation of objects. The abstract factory pattern provides an interface for 
creating multiple concrete products without specifying the concrete classes. In this project, the abstract factory 
has methods for creating concrete characters and concrete colors used by the application. It uses the factory 
method pattern to implement these. All creation of concrete products are randomized in the different factories, this 
could of course be specified instead. However, randomization suites the purpose of the game better. Random monsters 
are created for each level and the third level is based upon that the user randomizes several characters with different 
colors to be used in the background. Adding both new subclasses and products are easy with the factory patterns.
Would this application be further developed in the future, lots of functionality could be added to the different classes
to enhance the game. Perhaps adding attributes, stats, or gear to the monsters for more advanced levels.

The template method pattern implemented in this project defines the structure of the GUI. It has a set of abstract 
methods used to compose the GUI. It lets the subclasses, which are each of the different views the user encounters, 
define the content and the concrete implementation of these. By adding hooks to each method, the subclasses can 
choose to exclude any of the methods if they so choose. This gives the GUI a set frame for cohesiveness but still 
provides flexibility to the design. Creating more levels is easy by simply creating more subclasses.

By implementing the seven different design patterns and completing all the concrete goals the purpose has been 
fulfilled.

### Execution of the program
When running the program, the user first encounters a general start screen with brief information about the game, see 
figure 6. By pressing the 'start' button, the game then takes the user through five different levels, meeting random 
monsters on each level. Level 1, see figure 7, presents the user with a list of words, which can be sorted or counted 
based on the user's selection in a combo box. By pressing the 'Next level' button, the game moves on to level 2, see 
figure 8. At this level, the user needs to help the monster to place a certain amount of apples into different buckets.
If the answer is correct, level 3 starts. Here, the user can produce random monsters and unicorns from an abstract 
factory. Clicking on the 'Produce' button creates five characters, see figure 9. The user can proceed to the next level 
at any time by pressing the 'Next level' button. Level 4 displays a riddle for the user to answer, see figure 10. If 
they do so correctly, they proceed to level 5. At this level, the user meets Vaelarya Vision Walker, a dragon in need 
of help from evil monsters, see figure 11. By pressing the 'Channel crystal' button, a simulation begins where 
Vaelarya is healed by the user and damaged by the monsters. When Vealarya is either dead (0 hp or less) or completely 
healed to her maximum hp, the simulation ends automatically. The user then comes to an end view where there is a 
button for quitting the game and thereby shutting down the program, see figure 12. At any time during the game, the 
user can also quit the program by clicking on the 'X' in the upper right corner.

![](Start.PNG)
<br>Figure 6: Image of the start screen.

![](Lvl1.PNG)
<br>Figure 7: Image of level 1.

![](Lvl2.PNG)
<br>Figure 8: Image of level 2.

![](Lvl3.PNG)
<br>Figure 9: Image of level 3.

![](Lvl4.PNG)
<br>Figure 10: Image of level 4.

![](Lvl5.PNG)
<br>Figure 11: Image of level 5.

![](End.PNG)
<br>Figure 12: Image of the end screen.

### Personal reflections
This course has given me a deeper knowledge of OOP and Java, dabbling into pom and JAR files, creating GUI 
applications, etc. The course material has been very helpful, however as I am a big fan of the teacher's notes, more 
of these would be appreciated. It is always good to read code written by teachers to understand the 
code/classes/patterns, how to structure larger programs, how to comment etc. The most difficult part of this project 
was to incorporate all the different design patterns while still conforming to MVC. I decided to make five levels very 
early on during the development to fit in all the objectives. In hindsight, and if I were to redo this project, I 
would perhaps have implemented fewer levels with more substance and user interaction instead.
